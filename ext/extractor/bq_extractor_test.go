package extractor_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/goto/salt/log"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"

	"github.com/goto/optimus/ext/extractor"
	"github.com/goto/optimus/ext/store/bigquery"
)

func TestBQExtractor(t *testing.T) {
	ctx := context.Background()
	l := log.NewNoop()

	t.Run("should return error if client is nil", func(t *testing.T) {
		bqExtractor, err := extractor.NewBQExtractor(nil, l)
		assert.ErrorContains(t, err, "client is nil")
		assert.Nil(t, bqExtractor)
	})
	t.Run("should return error if logger is nil", func(t *testing.T) {
		client := new(Client)
		defer client.AssertExpectations(t)
		bqExtractor, err := extractor.NewBQExtractor(client, nil)
		assert.ErrorContains(t, err, "logger is nil")
		assert.Nil(t, bqExtractor)
	})
	t.Run("should return no error if get ddl is fail because of access denied", func(t *testing.T) {
		resourceURNTable, _ := bigquery.NewResourceURN("project", "dataset", "name")
		resourceURNs := []bigquery.ResourceURN{resourceURNTable}

		client := new(Client)
		defer client.AssertExpectations(t)

		client.On("BulkGetDDLView", ctx, mock.Anything, mock.Anything).Return(nil, fmt.Errorf("access denied"))
		bqExtractor, _ := extractor.NewBQExtractor(client, l)
		urnToDDL, err := bqExtractor.Extract(ctx, resourceURNs)
		assert.NoError(t, err)
		assert.Empty(t, urnToDDL)
	})
	t.Run("should return error if get ddl is fail due to an error other than access related error", func(t *testing.T) {
		resourceURNTable, _ := bigquery.NewResourceURN("project", "dataset", "name")
		resourceURNs := []bigquery.ResourceURN{resourceURNTable}

		client := new(Client)
		defer client.AssertExpectations(t)

		client.On("BulkGetDDLView", ctx, mock.Anything, mock.Anything).Return(nil, fmt.Errorf("some error"))
		bqExtractor, _ := extractor.NewBQExtractor(client, l)
		urnToDDL, err := bqExtractor.Extract(ctx, resourceURNs)
		assert.Error(t, err)
		assert.Empty(t, urnToDDL)
	})
	t.Run("should return ddl given corresponding resourceURN", func(t *testing.T) {
		resourceURNTable, _ := bigquery.NewResourceURN("project", "dataset", "name")
		resourceURNView, _ := bigquery.NewResourceURN("project", "dataset", "view")
		resourceURNs := []bigquery.ResourceURN{resourceURNTable, resourceURNView}

		client := new(Client)
		defer client.AssertExpectations(t)

		client.On("BulkGetDDLView", ctx, mock.Anything, mock.Anything).Return(map[bigquery.ResourceURN]string{
			resourceURNTable: "",
			resourceURNView:  "select * from anotherproject.dataset.anothertable",
		}, nil)
		bqExtractor, _ := extractor.NewBQExtractor(client, l)
		urnToDDL, err := bqExtractor.Extract(ctx, resourceURNs)
		assert.NoError(t, err)
		assert.Len(t, urnToDDL, 2)
	})
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BulkGetDDLView provides a mock function with given fields: ctx, dataset, names
func (_m *Client) BulkGetDDLView(ctx context.Context, pd bigquery.ProjectDataset, names []string) (map[bigquery.ResourceURN]string, error) {
	ret := _m.Called(ctx, pd, names)

	var r0 map[bigquery.ResourceURN]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bigquery.ProjectDataset, []string) (map[bigquery.ResourceURN]string, error)); ok {
		return rf(ctx, pd, names)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bigquery.ProjectDataset, []string) map[bigquery.ResourceURN]string); ok {
		r0 = rf(ctx, pd, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[bigquery.ResourceURN]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bigquery.ProjectDataset, []string) error); ok {
		r1 = rf(ctx, pd, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatasetHandleFrom provides a mock function with given fields: dataset
func (_m *Client) DatasetHandleFrom(dataset bigquery.ProjectDataset) bigquery.ResourceHandle {
	ret := _m.Called(dataset)

	var r0 bigquery.ResourceHandle
	if rf, ok := ret.Get(0).(func(bigquery.ProjectDataset) bigquery.ResourceHandle); ok {
		r0 = rf(dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bigquery.ResourceHandle)
		}
	}

	return r0
}

// ExternalTableHandleFrom provides a mock function with given fields: dataset, name
func (_m *Client) ExternalTableHandleFrom(dataset bigquery.ProjectDataset, name string) bigquery.ResourceHandle {
	ret := _m.Called(dataset, name)

	var r0 bigquery.ResourceHandle
	if rf, ok := ret.Get(0).(func(bigquery.ProjectDataset, string) bigquery.ResourceHandle); ok {
		r0 = rf(dataset, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bigquery.ResourceHandle)
		}
	}

	return r0
}

// TableHandleFrom provides a mock function with given fields: dataset, name
func (_m *Client) TableHandleFrom(dataset bigquery.ProjectDataset, name string) bigquery.TableResourceHandle {
	ret := _m.Called(dataset, name)

	var r0 bigquery.TableResourceHandle
	if rf, ok := ret.Get(0).(func(bigquery.ProjectDataset, string) bigquery.TableResourceHandle); ok {
		r0 = rf(dataset, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bigquery.TableResourceHandle)
		}
	}

	return r0
}

// ViewHandleFrom provides a mock function with given fields: dataset, name
func (_m *Client) ViewHandleFrom(dataset bigquery.ProjectDataset, name string) bigquery.ResourceHandle {
	ret := _m.Called(dataset, name)

	var r0 bigquery.ResourceHandle
	if rf, ok := ret.Get(0).(func(bigquery.ProjectDataset, string) bigquery.ResourceHandle); ok {
		r0 = rf(dataset, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bigquery.ResourceHandle)
		}
	}

	return r0
}
