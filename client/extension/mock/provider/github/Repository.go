// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock_github

import (
	context "context"

	github "github.com/google/go-github/v59/github"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CompareCommits provides a mock function with given fields: ctx, owner, repo, base, head, opts
func (_m *Repository) CompareCommits(ctx context.Context, owner string, repo string, base string, head string, opts *github.ListOptions) (*github.CommitsComparison, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, base, head, opts)

	if len(ret) == 0 {
		panic("no return value specified for CompareCommits")
	}

	var r0 *github.CommitsComparison
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *github.ListOptions) (*github.CommitsComparison, *github.Response, error)); ok {
		return rf(ctx, owner, repo, base, head, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *github.ListOptions) *github.CommitsComparison); ok {
		r0 = rf(ctx, owner, repo, base, head, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CommitsComparison)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, base, head, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, base, head, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_CompareCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareCommits'
type Repository_CompareCommits_Call struct {
	*mock.Call
}

// CompareCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - base string
//   - head string
//   - opts *github.ListOptions
func (_e *Repository_Expecter) CompareCommits(ctx interface{}, owner interface{}, repo interface{}, base interface{}, head interface{}, opts interface{}) *Repository_CompareCommits_Call {
	return &Repository_CompareCommits_Call{Call: _e.mock.On("CompareCommits", ctx, owner, repo, base, head, opts)}
}

func (_c *Repository_CompareCommits_Call) Run(run func(ctx context.Context, owner string, repo string, base string, head string, opts *github.ListOptions)) *Repository_CompareCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(*github.ListOptions))
	})
	return _c
}

func (_c *Repository_CompareCommits_Call) Return(_a0 *github.CommitsComparison, _a1 *github.Response, _a2 error) *Repository_CompareCommits_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_CompareCommits_Call) RunAndReturn(run func(context.Context, string, string, string, string, *github.ListOptions) (*github.CommitsComparison, *github.Response, error)) *Repository_CompareCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommit provides a mock function with given fields: ctx, owner, repo, sha, opts
func (_m *Repository) GetCommit(ctx context.Context, owner string, repo string, sha string, opts *github.ListOptions) (*github.RepositoryCommit, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, sha, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetCommit")
	}

	var r0 *github.RepositoryCommit
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.ListOptions) (*github.RepositoryCommit, *github.Response, error)); ok {
		return rf(ctx, owner, repo, sha, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.ListOptions) *github.RepositoryCommit); ok {
		r0 = rf(ctx, owner, repo, sha, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, sha, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, sha, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommit'
type Repository_GetCommit_Call struct {
	*mock.Call
}

// GetCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - sha string
//   - opts *github.ListOptions
func (_e *Repository_Expecter) GetCommit(ctx interface{}, owner interface{}, repo interface{}, sha interface{}, opts interface{}) *Repository_GetCommit_Call {
	return &Repository_GetCommit_Call{Call: _e.mock.On("GetCommit", ctx, owner, repo, sha, opts)}
}

func (_c *Repository_GetCommit_Call) Run(run func(ctx context.Context, owner string, repo string, sha string, opts *github.ListOptions)) *Repository_GetCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*github.ListOptions))
	})
	return _c
}

func (_c *Repository_GetCommit_Call) Return(_a0 *github.RepositoryCommit, _a1 *github.Response, _a2 error) *Repository_GetCommit_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_GetCommit_Call) RunAndReturn(run func(context.Context, string, string, string, *github.ListOptions) (*github.RepositoryCommit, *github.Response, error)) *Repository_GetCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetContents provides a mock function with given fields: ctx, owner, repo, path, opts
func (_m *Repository) GetContents(ctx context.Context, owner string, repo string, path string, opts *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, path, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetContents")
	}

	var r0 *github.RepositoryContent
	var r1 []*github.RepositoryContent
	var r2 *github.Response
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error)); ok {
		return rf(ctx, owner, repo, path, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r0 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) []*github.RepositoryContent); ok {
		r1 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*github.RepositoryContent)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r2 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*github.Response)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r3 = rf(ctx, owner, repo, path, opts)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Repository_GetContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContents'
type Repository_GetContents_Call struct {
	*mock.Call
}

// GetContents is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - path string
//   - opts *github.RepositoryContentGetOptions
func (_e *Repository_Expecter) GetContents(ctx interface{}, owner interface{}, repo interface{}, path interface{}, opts interface{}) *Repository_GetContents_Call {
	return &Repository_GetContents_Call{Call: _e.mock.On("GetContents", ctx, owner, repo, path, opts)}
}

func (_c *Repository_GetContents_Call) Run(run func(ctx context.Context, owner string, repo string, path string, opts *github.RepositoryContentGetOptions)) *Repository_GetContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*github.RepositoryContentGetOptions))
	})
	return _c
}

func (_c *Repository_GetContents_Call) Return(fileContent *github.RepositoryContent, directoryContent []*github.RepositoryContent, resp *github.Response, err error) *Repository_GetContents_Call {
	_c.Call.Return(fileContent, directoryContent, resp, err)
	return _c
}

func (_c *Repository_GetContents_Call) RunAndReturn(run func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error)) *Repository_GetContents_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommits provides a mock function with given fields: ctx, owner, repo, opts
func (_m *Repository) ListCommits(ctx context.Context, owner string, repo string, opts *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListCommits")
	}

	var r0 []*github.RepositoryCommit
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error)); ok {
		return rf(ctx, owner, repo, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.CommitsListOptions) []*github.RepositoryCommit); ok {
		r0 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.CommitsListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.CommitsListOptions) error); ok {
		r2 = rf(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_ListCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommits'
type Repository_ListCommits_Call struct {
	*mock.Call
}

// ListCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - opts *github.CommitsListOptions
func (_e *Repository_Expecter) ListCommits(ctx interface{}, owner interface{}, repo interface{}, opts interface{}) *Repository_ListCommits_Call {
	return &Repository_ListCommits_Call{Call: _e.mock.On("ListCommits", ctx, owner, repo, opts)}
}

func (_c *Repository_ListCommits_Call) Run(run func(ctx context.Context, owner string, repo string, opts *github.CommitsListOptions)) *Repository_ListCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*github.CommitsListOptions))
	})
	return _c
}

func (_c *Repository_ListCommits_Call) Return(_a0 []*github.RepositoryCommit, _a1 *github.Response, _a2 error) *Repository_ListCommits_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_ListCommits_Call) RunAndReturn(run func(context.Context, string, string, *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error)) *Repository_ListCommits_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
