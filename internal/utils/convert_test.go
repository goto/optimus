package utils_test

import (
	"testing"
	"time"

	"github.com/AlecAivazis/survey/v2"
	"github.com/stretchr/testify/assert"

	"github.com/goto/optimus/internal/utils"
)

func TestConvert(t *testing.T) {
	t.Run("convert map containing int, string and optionAnswer", func(t *testing.T) {
		optionAnswer := survey.OptionAnswer{
			Value: "value",
		}
		inputs := map[string]interface{}{
			"key-1": 1,
			"key-2": "string",
			"key-3": optionAnswer,
		}
		answerMap, err := utils.ConvertToStringMap(inputs)
		assert.Nil(t, err)
		assert.Equal(t, "1", answerMap["key-1"])
		assert.Equal(t, "string", answerMap["key-2"])
		assert.Equal(t, optionAnswer.Value, answerMap["key-3"])
	})
	t.Run("convert fails while converting double vals	", func(t *testing.T) {
		inputs := map[string]interface{}{
			"key-1": 0.5,
		}
		_, err := utils.ConvertToStringMap(inputs)
		assert.NotNil(t, err)
		assert.Contains(t, err.Error(), "unknown type found while parsing user inputs")
	})
}

func TestConvertTimeToGoLayout(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{"YYYY-MM-DD", "2006-01-02"},
		{"YY/MM/DD", "06/01/02"},
		{"MMMM DDDD", "January Monday"},
		{"MMM DDD", "Jan Mon"},
		{"MM/DD/YYYY", "01/02/2006"},
		{"M/D/YY", "1/2/06"},
		{"hh:mm:ss", "15:04:05"},
		{"h:m:s am/pm", "3:4:5 pm"},
		{"±hh:mm:ss", "-07:00:00"},
		{"Zhh:mm", "Z07:00"},
		{"TTT", "MST"},
		{"YYYY-MM-DD hh:mm:ss TTT ±hh:mm", "2006-01-02 15:04:05 MST -07:00"},
	}

	for _, test := range tests {
		t.Run(test.input, func(t *testing.T) {
			actual := utils.ConvertTimeToGoLayout(test.input)
			assert.Equal(t, test.expected, actual)
		})
	}
}

func TestConvertLotus123SerialToTime(t *testing.T) {
	t.Run("TestConvertLotus123SerialToTime", func(t *testing.T) {
		// all the following serial numbers have been generated from Google Sheets
		testCases := map[string]float64{
			"2001-01-01 12:30:14": 36892.52099537037,
			"2002-01-04 11:10:44": 37260.465787037036,
			"2004-10-10 03:33:33": 38270.14829861111,
			"2004-10-10 03:55:55": 38270.163831018515,
			"2021-01-01 12:30:14": 44197.52099537037,
			"2025-01-24 19:31:25": 45681.81348379629,
			"2029-02-17 02:32:36": 47166.10597222222,
			"2033-03-12 09:33:47": 48650.398460648146,
			"2037-04-04 16:34:58": 50134.69094907407,
			"2041-04-27 23:36:09": 51618.9834375,
			"2045-05-21 06:37:20": 53103.275925925926,
			"2049-06-13 13:38:31": 54587.56841435185,
			"2053-07-06 20:39:42": 56071.86090277778,
			"2057-07-30 03:40:53": 57556.153391203705,
			"2000-05-29 07:32:46": 36675.314421296294,
			"2001-12-12 17:10:03": 37237.7153125,
			"2002-08-17 04:41:08": 37485.195231481484,
			"2003-07-06 14:38:44": 37808.61023148148,
			"2004-02-02 12:28:06": 38019.51951388889,
			"2005-11-23 02:09:52": 38679.09018518519,
			"2006-03-13 10:56:19": 38789.455775462964,
			"2007-06-01 21:17:30": 39234.88715277778,
			"2008-08-27 11:59:46": 39687.49983796296,
			"2009-10-14 00:45:11": 40100.031377314815,
			"2010-12-05 16:31:39": 40517.68864583333,
			"2011-04-10 07:12:01": 40643.30001157407,
			"2012-07-25 20:24:55": 41115.850636574076,
			"2013-09-17 06:39:34": 41534.27747685185,
			"2014-01-01 02:48:03": 41640.11670138889,
			"2015-06-12 19:33:21": 42167.81482638889,
			"2016-02-29 09:50:44": 42429.41023148148,
			"2017-11-08 05:25:36": 43047.226111111115,
			"2018-03-14 13:41:20": 43173.57037037037,
			"2019-05-19 03:18:28": 43604.137824074074,
			"2020-08-08 14:06:50": 44051.5880787037,
			"2021-01-10 18:51:03": 44206.78545138889,
			"2022-04-25 10:03:44": 44676.41925925926,
			"2023-07-16 23:17:09": 45123.970243055555,
			"2024-09-27 08:29:51": 45562.3540625,
			"2025-03-01 00:15:17": 45717.010613425926,
			"2026-11-13 21:47:38": 46339.9080787037,
			"2027-06-06 16:56:22": 46544.70581018519,
			"2028-02-17 07:04:39": 46800.294895833336,
			"2029-10-01 13:20:12": 47392.55569444445,
			"2030-12-25 05:33:07": 47842.23133101852,
			"2031-05-11 22:09:53": 47979.923530092594,
			"2032-07-04 09:12:36": 48399.38375,
			"2033-01-28 18:36:47": 48607.77554398148,
			"2034-09-18 02:01:29": 49205.08436342593,
			"2035-03-15 06:44:38": 49383.28099537037,
			"2036-06-20 12:26:00": 49846.518055555556,
			"2037-08-30 01:59:14": 50282.08280092593,
			"2038-10-11 15:39:47": 50689.65262731481,
			"2039-04-04 04:07:58": 50864.17219907408,
			"2040-02-26 20:58:33": 51192.87399305555,
			"2041-06-10 11:42:25": 51662.48778935185,
			"2042-03-03 08:50:06": 51928.368125,
			"2043-09-25 19:19:11": 52499.80498842592,
			"2044-05-17 17:27:31": 52734.72744212963,
			"2045-07-22 00:40:20": 53165.02800925926,
			"2046-08-08 10:31:47": 53547.438738425924,
			"2047-12-19 06:55:13": 54045.28834490741,
			"2048-11-30 16:15:25": 54392.67737268518,
			"2049-06-06 22:37:03": 54580.942395833335,
			"2050-10-13 05:44:39": 55074.239340277774,
			"2051-01-01 09:03:54": 55154.37770833333,
			"2052-07-26 18:12:47": 55726.758877314816,
			"2053-08-18 14:25:19": 56114.60091435185,
			"2054-03-05 23:39:58": 56313.98608796296,
			"2055-09-29 03:28:06": 56886.14451388889,
			"2056-04-12 12:06:31": 57082.504525462966,
			"2057-05-24 07:58:42": 57489.33243055556,
			"2058-06-15 20:16:55": 57876.84508101852,
			"2059-10-07 16:48:33": 58355.70038194444,
			"2060-01-01 00:00:00": 58441,
			"2001-03-09 04:57:29": 36959.20658564815,
			"2002-05-23 11:11:41": 37399.46644675926,
			"2003-12-31 23:59:59": 37986.99998842592,
			"2004-04-04 03:03:03": 38081.127118055556,
			"2005-06-06 06:06:06": 38509.25423611111,
			"2006-08-08 08:08:08": 38937.33898148148,
			"2007-09-09 09:09:09": 39334.38135416667,
			"2008-10-10 10:10:10": 39731.423726851855,
			"2009-11-11 11:11:11": 40128.466099537036,
			"2010-12-12 12:12:12": 40524.508472222224,
			"2011-01-01 01:01:01": 40544.04237268519,
			"2012-02-02 02:02:02": 40941.08474537037,
			"2013-03-03 03:03:03": 41336.127118055556,
			"2014-04-04 04:04:04": 41733.169490740744,
			"2015-05-05 05:05:05": 42129.211863425924,
			"2016-06-06 06:06:06": 42527.25423611111,
			"2017-07-07 07:07:07": 42923.2966087963,
			"2018-08-08 08:08:08": 43320.33898148148,
			"2019-09-09 09:09:09": 43717.38135416667,
			"2020-10-10 10:10:10": 44114.423726851855,
			"2021-11-11 11:11:11": 44511.466099537036,
			"2022-12-12 12:12:12": 44907.508472222224,
			"2023-01-23 13:13:13": 44949.550844907404,
			"2024-02-24 14:14:14": 45346.59321759259,
			"2025-03-25 15:15:15": 45741.63559027778,
			"2026-04-26 16:16:16": 46138.67796296296,
			"2027-05-27 17:17:17": 46534.72033564815,
			"2028-06-28 18:18:18": 46932.762708333335,
			"2029-07-29 19:19:19": 47328.805081018516,
			"2030-08-30 20:20:20": 47725.847453703704,
			"2031-09-01 21:21:21": 48092.88982638889,
			"2032-10-02 22:22:22": 48489.93219907407,
			"2033-11-03 23:23:23": 48886.97457175926,
			"2034-12-04 00:00:01": 49282.00001157408,
			"2035-01-05 01:02:03": 49314.04309027778,
			"2036-02-06 02:03:04": 49711.08546296296,
			"2037-03-07 03:04:05": 50106.12783564815,
			"2038-04-08 04:05:06": 50503.17020833334,
			"2039-05-09 05:06:07": 50899.21258101852,
			"2040-06-10 06:07:08": 51297.254953703705,
			"2041-07-11 07:08:09": 51693.297326388885,
			"2042-08-12 08:09:10": 52090.33969907407,
			"2043-09-13 09:10:11": 52487.38207175926,
			"2044-10-14 10:11:12": 52884.42444444444,
			"2045-11-15 11:12:13": 53281.46681712963,
			"2046-12-16 12:13:14": 53677.50918981482,
		}
		failureCount := 0
		for expected, incomingSerial := range testCases {
			t.Run(expected, func(t *testing.T) {
				result := utils.ConvertLotus123SerialToTime(incomingSerial, time.Millisecond)
				expected, _ := time.Parse(time.DateTime, expected)
				assert.Equal(t, expected, result)
				if !expected.Equal(result) {
					failureCount++
				}
			})
		}
		assert.Zero(t, failureCount)
	})
}
