package resolver_test

import (
	"context"
	"testing"

	"github.com/goto/optimus/core/job/resolver"
	"github.com/goto/optimus/ext/extractor/upstream"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestGenerateDependencies(t *testing.T) {
	ctx := context.Background()
	t.Run("should generate dependencies for select statements", func(t *testing.T) {
		expectedDeps := []string{"bigquery://proj:dataset.table1"}
		query := "Select * from proj.dataset.table1"

		upstreamExtractor := new(UpstreamExtractor)
		upstreamExtractor.On("ExtractUpstreams", ctx, query, mock.Anything).Return([]*upstream.Resource{
			{
				Project: "proj",
				Dataset: "dataset",
				Name:    "table1",
			},
		}, nil)
		defer upstreamExtractor.AssertExpectations(t)

		upstreamResources, err := resolver.GenerateDependencies(ctx, nil, upstreamExtractor, query, "bigquery://proj:datas.tab")
		assert.NoError(t, err)
		assert.ElementsMatch(t, expectedDeps, upstreamResources)
	})

	t.Run("should generate unique dependencies for select statements", func(t *testing.T) {
		expectedDeps := []string{"bigquery://proj:dataset.table1", "bigquery://proj:dataset.table2"}
		query := "Select * from proj.dataset.table1 t1 join proj.dataset.table1 t2 on t1.col1 = t2.col1"

		upstreamExtractor := new(UpstreamExtractor)
		upstreamExtractor.On("ExtractUpstreams", ctx, query, mock.Anything).Return([]*upstream.Resource{
			{
				Project: "proj",
				Dataset: "dataset",
				Name:    "table1",
				Upstreams: []*upstream.Resource{
					{
						Project: "proj",
						Dataset: "dataset",
						Name:    "table2",
					},
				},
			},
			{
				Project: "proj",
				Dataset: "dataset",
				Name:    "table2",
			},
			{
				Project: "proj",
				Dataset: "dataset",
				Name:    "table1",
			},
		}, nil)
		defer upstreamExtractor.AssertExpectations(t)

		upstreamResources, err := resolver.GenerateDependencies(ctx, nil, upstreamExtractor, query, "bigquery://proj:datas.tab")
		assert.NoError(t, err)
		assert.ElementsMatch(t, expectedDeps, upstreamResources)
	})

	t.Run("should generate dependencies for select statements but ignore if asked explicitly", func(t *testing.T) {
		var expectedDeps []string
		query := "Select * from /* @ignoreupstream */ proj.dataset.table1"
		upstreamExtractor := new(UpstreamExtractor)
		upstreamExtractor.On("ExtractUpstreams", ctx, query, mock.Anything).Return([]*upstream.Resource{}, nil)
		defer upstreamExtractor.AssertExpectations(t)

		upstreamResources, err := resolver.GenerateDependencies(ctx, nil, upstreamExtractor, query, "bigquery://proj:datas.tab")
		assert.NoError(t, err)
		assert.ElementsMatch(t, expectedDeps, upstreamResources)
	})

	t.Run("should generate dependencies for select statements but ignore if asked explicitly for view", func(t *testing.T) {
		expectedDeps := []string{"bigquery://proj:dataset.table1"}
		query := "Select * from proj.dataset.table1 t1 left join /* @ignoreupstream */ proj.dataset.view1 v1 on t1.date=v1.date"
		upstreamExtractor := new(UpstreamExtractor)
		upstreamExtractor.On("ExtractUpstreams", ctx, query, mock.Anything).Return([]*upstream.Resource{
			{
				Project: "proj",
				Dataset: "dataset",
				Name:    "table1",
			},
		}, nil)
		defer upstreamExtractor.AssertExpectations(t)

		upstreamResources, err := resolver.GenerateDependencies(ctx, nil, upstreamExtractor, query, "bigquery://proj:datas.tab")
		assert.NoError(t, err)
		assert.ElementsMatch(t, expectedDeps, upstreamResources)
	})
}

// UpstreamExtractor is an autogenerated mock type for the UpstreamExtractor type
type UpstreamExtractor struct {
	mock.Mock
}

// ExtractUpstreams provides a mock function with given fields: ctx, query, destinationResource
func (_m *UpstreamExtractor) ExtractUpstreams(ctx context.Context, query string, destinationResource *upstream.Resource) ([]*upstream.Resource, error) {
	ret := _m.Called(ctx, query, destinationResource)

	var r0 []*upstream.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *upstream.Resource) ([]*upstream.Resource, error)); ok {
		return rf(ctx, query, destinationResource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *upstream.Resource) []*upstream.Resource); ok {
		r0 = rf(ctx, query, destinationResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*upstream.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *upstream.Resource) error); ok {
		r1 = rf(ctx, query, destinationResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUpstreamExtractor creates a new instance of UpstreamExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpstreamExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpstreamExtractor {
	mock := &UpstreamExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
