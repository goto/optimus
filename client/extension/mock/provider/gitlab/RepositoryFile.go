// Code generated by mockery v2.43.0. DO NOT EDIT.

package mock_gitlab

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "github.com/xanzy/go-gitlab"
)

// RepositoryFile is an autogenerated mock type for the RepositoryFile type
type RepositoryFile struct {
	mock.Mock
}

// GetRawFile provides a mock function with given fields: pid, fileName, opt, options
func (_m *RepositoryFile) GetRawFile(pid interface{}, fileName string, opt *gitlab.GetRawFileOptions, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pid, fileName, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRawFile")
	}

	var r0 []byte
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)); ok {
		return rf(pid, fileName, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) []byte); ok {
		r0 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(pid, fileName, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(interface{}, string, *gitlab.GetRawFileOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(pid, fileName, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRepositoryFile creates a new instance of RepositoryFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryFile {
	mock := &RepositoryFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
